// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Student {
  domain_id       String         @id
  password        String
  name            String
  hostel          Hostels
  room_number     String
  phone_number    String
  profile_picture String?
  issue_list      Issue[]
  notification    Notification[]
  rebate          Rebate[]
  payment         Payment[]
  mess_due String @default("0")
  role            Roles          @default(student)
}

model Technician {
  technician_id String     @id @default(uuid())
  password      String
  name          String
  email         String     @unique
  category      Categories
  phone_number  String
  Address       String?
  issue_list    Issue[]
  role          Roles      @default(technician)
}

model Issue {
  issue_id    Int        @id @default(autoincrement())
  created_at  DateTime   @default(now())
  is_public   Boolean    @default(false)
  category    Categories
  title       String
  description String
  is_resolved Boolean    @default(false)
  issue_media String?
  location    String

  student_id    String
  technician_id String?

  notification Notification?

  student    Student     @relation(fields: [student_id], references: [domain_id], onDelete: Cascade, onUpdate: Cascade)
  technician Technician? @relation(fields: [technician_id], references: [technician_id], onDelete: Cascade, onUpdate: Cascade)
}

model Notification {
  issue_id         Int      @unique
  student_id       String
  sent_at          DateTime @default(now())
  hostel_admin_id  String?
  college_admin_id String?

  issue         Issue          @relation(fields: [issue_id], references: [issue_id], onDelete: Cascade, onUpdate: Cascade)
  student       Student        @relation(fields: [student_id], references: [domain_id], onDelete: Cascade, onUpdate: Cascade)
  hostel_admin  Hostel_admin?  @relation(fields: [hostel_admin_id], references: [domain_id], onDelete: Cascade, onUpdate: Cascade)
  college_admin College_admin? @relation(fields: [college_admin_id], references: [domain_id], onDelete: Cascade, onUpdate: Cascade)

  @@id([issue_id, student_id])
}

model Hostel_admin {
  domain_id    String         @id
  hostel       Hostels
  name         String
  password     String
  notification Notification[]
  phone_number String
  role         Roles          @default(hostel_admin)
}

model College_admin {
  domain_id    String         @id
  name         String
  password     String
  college_name String
  phone_number String
  Notification Notification[]
  role         Roles          @default(college_admin)
}

model Rebate{
  rebate_id Int @id @default(autoincrement())
  from DateTime @db.Date @default(now())
  to DateTime @db.Date 
  reason String
  student_id String
  student Student @relation(fields: [student_id], references: [domain_id], onDelete: Cascade, onUpdate: Cascade)
}

model Payment{
  razorpay_payment_id String @id
  student_id String
  razorpay_order_id String
  razorpay_signature String
  payment_date DateTime @default(now())
  student Student @relation(fields: [student_id], references: [domain_id], onDelete: Cascade, onUpdate: Cascade)
}

model AuthKey{
  key String @id
  role AuthRoles
}

enum Roles {
  student
  technician
  hostel_admin
  college_admin
}

enum AuthRoles {
  technician
  hostel_admin
  college_admin
}

enum Categories {
  carpentry
  electrician
  plumber
  internet_service
  laundry
  mason
  mess_staff
  sweeper
}

enum Hostels {
  H1
  H2
  H3
  H4
  H5
  H6
  H7
  H8
  H9
  H10
  H11
  Kalpana_Chawla_Bhawan
  Bhagirathi_Bhawan
  Cauvery_Bhawan
  Alaknanda_Bhawan
}